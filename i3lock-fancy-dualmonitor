#!/usr/bin/env bash
# Author: Dolores Portalatin <hello@doloresportalatin.info>
# Fork: Iván Giner <ivan.giner@tecnalia.com>
# Dependencies: imagemagick, i3lock-color-git, scrot, wmctrl (optional), xdotool (optional)
set -o errexit -o noclobber -o nounset

# Effects 
hue=(-level "0%,100%,0.6")
effect=(-filter Gaussian -resize 20% -define "filter:sigma=1.5" -resize 500.5%)
# Default system sans-serif font or DejaVu-Sans as fallback
font="DejaVu-Sans"  # Fallback font
pointsize=26                                                    # Text pointsize, in pixels
text_off_y=160                                                  # Y axis space from lock, in pixels
shot=(import -silent -window root)                              # Shot kind
desktop=false                                                   # Show desktop in the screenshot flag
shot_custom=false                                               # Custom flag to show desktop
dm=$(xdpyinfo | awk '/^  dimensions(.+([0-9]+))/{print $2}')    # Monitors full combined size
threshold=0.5                                                   # Brightness threshold dark<th<light theme

# Color parameters for the lock
param=("--inside-color=ffffff1c" "--ring-color=ffffff3e" \
    "--line-color=ffffff00" "--keyhl-color=00000080" "--ringver-color=00000000" \
    "--separator-color=22222260" \
    "--ringwrong-color=ff0000ff" "--insidewrong-color=0000001c" \
    "--ringver-color=00ff00ff" "--insidever-color=0000001c" \
    "--verif-color=00000000" "--wrong-color=00000000" "--time-color=00000000" \
    "--date-color=00000000" "--layout-color=00000000")

# Options (little manual)
options="Options:
    -h, --help              This help menu.

    -d, --desktop           Attempt to minimize all windows before locking.

    -g, --greyscale         Set background to greyscale instead of color.

    -p, --pixelate          Pixelate the background instead of blur, runs faster.

    -f, --font <fontname>   Set a custom font.

    -t, --text <text>       Set a custom text prompt.

    -l, --listfonts         Display a list of possible fonts for use with -f/--font.
                            Note: this option will not lock the screen, it displays
                            the list and exits immediately.

    --                      Must be last option. Set command to use for taking a
                            screenshot. Default is 'import -window root'. Using 'scrot'
                            or 'maim' will increase script speed and allow setting
                            custom flags like having a delay."

# move pipefail down as for some reason "convert -list font" returns 1
set -o pipefail
trap 'rm -f "$image"' EXIT
temp="$(getopt -o :hdnpglt:f: -l desktop,help,listfonts,nofork,pixelate,greyscale,text:,font: --name "$0" -- "$@")"
eval set -- "$temp"

# l10n support
case "${LANG:-}" in
    af_* ) text="Tik wagwoord om te ontsluit" ;; # Afrikaans
    cs_* ) text="Pro odemčení zadajte heslo" ;; # Czech
    de_* ) text="Bitte Passwort eingeben" ;; # Deutsch
    da_* ) text="Indtast adgangskode" ;; # Danish
    en_* ) text="Type password to unlock" ;; # English
    es_* ) text="Ingrese su contraseña" ;; # Española
    fr_* ) text="Entrez votre mot de passe" ;; # Français
    he_* ) text="הקלד סיסמה לביטול הנעילה" ;; # Hebrew עברית
    hi_* ) text="अनलॉक करने के लिए पासवर्ड टाईप करें" ;; #Hindi
    id_* ) text="Masukkan kata sandi Anda" ;; # Bahasa Indonesia
    it_* ) text="Inserisci la password" ;; # Italian
    ja_* ) text="パスワードを入力してください" ;; # Japanese
    lv_* ) text="Ievadi paroli" ;; # Latvian
    nb_* ) text="Skriv inn passord" ;; # Norwegian
    pl_* ) text="Podaj hasło" ;; # Polish
    pt_* ) text="Digite a senha para desbloquear" ;; # Português
    sk_* ) text="Pre odomknutie zadajte heslo" ;; # Slovak
    tr_* ) text="Giriş yapmak için şifrenizi girin" ;; # Turkish
    ru_* ) text="Введите пароль" ;; # Russian
    zh_* ) text="请输入密码以解锁" ;; # Chinese
    * ) text="Type password to unlock" ;; # Default to English
esac

while true ; do
    case "$1" in
        -h|--help)
            printf "Usage: %s [options]\n\n%s\n\n" "${0##*/}" "$options"; exit 1 ;;
        -d|--desktop) desktop=true ; shift ;;
        -g|--greyscale) hue=(-level "0%,100%,0.6" -set colorspace Gray -average) ; shift ;;
        -p|--pixelate) effect=(-scale 10% -scale 1000%) ; shift ;;
        -f|--font)
            case "$2" in
                "") shift 2 ;;
                *) font=$2 ; shift 2 ;;
            esac ;;
        -t|--text) text=$2 ; shift 2 ;;
        -l|--listfonts)
	    convert -list font | awk -F: '/Font: / { print $2 }' | sort -du | command -- ${PAGER:-less}
	    exit 0 ;;
        --) shift; shot_custom=true; break ;;
        *) echo "error" ; exit 1 ;;
    esac
done

# If invoked with -d/--desktop, we'll attempt to minimize all windows (ie. show the desktop) before locking.
if "$desktop"; then
    # Get the list of all window IDs
    window_ids=$(wmctrl -l | awk '{print $1}')
    # Minimize all windows
    for id in $window_ids; do
        xdotool windowminimize $id
    done
    # Let all windows minimize before taking the screenshot
    sleep 0.5
fi

# Custom shot support
if "$shot_custom" && [[ $# -gt 0 ]]; then
    shot=("$@");
fi

# Take screenshot of the current monitors and saved in /tmp
image=$(mktemp --suffix=.png)
command -- "${shot[@]}" "$image"

# Calculate the dimensions of the text
dimensions=($(convert -font $font -pointsize $pointsize label:"$text" -format "%w %h" info:))

# Create the lock icon and text for each screen and add it to the screenshot
lock=()
while read line
do
    if [[ "$line" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]; then
        # Calculations from screen parameters
        W=${BASH_REMATCH[1]}
        H=${BASH_REMATCH[2]}
        Xoff=${BASH_REMATCH[3]}
        Yoff=${BASH_REMATCH[4]}
        MIDXi=$(($W / 2 + $Xoff - 60  / 2))
        MIDYi=$(($H / 2 + $Yoff - 60  / 2))
        MIDXt=$(($W / 2 + $Xoff - dimensions[0] / 2))
        MIDYt=$(($H / 2 + $Yoff + dimensions[1] / 2 + $text_off_y))
        MIDXts=$(($MIDXt + 2))
        MIDYts=$(($MIDYt + 2))

        # Crop the center of the scren
        crop=$(mktemp --suffix=.png)
        crop_x=$(($W / 2 + $Xoff - 200  / 2))
        crop_y=$(($H / 2 + $Yoff - 200  / 2))
        convert $image -crop 200x200+${crop_x}+${crop_y} $crop

        # Calculate brightness
        brightness=$(convert $crop -colorspace Gray -format "%[fx:mean]" info:)
        
        # Use dark or light lock icon 
        if (( $(echo "$brightness > $threshold" | bc -l) )); then # White background (Dark icon)
            msg_color=("white" "black") # Lock message font color and shadow color
            icon="/usr/share/i3lock-fancy-dualmonitor/icons/lockdark.png"
        else # Dark background (White icon)
            msg_color=("black" "white") # Lock message font color and shadow color
            icon="/usr/share/i3lock-fancy-dualmonitor/icons/lock.png"
        fi

        # Create the lock icon and text for this screen
        lock+=(\( -size $dm xc:none -font $font -pointsize $pointsize -fill ${msg_color[0]} -annotate +$MIDXts+$MIDYts "$text" \
            -fill ${msg_color[1]} -annotate +$MIDXt+$MIDYt "$text" \) \
            -flatten $icon -geometry +$MIDXi+$MIDYi -composite)
    fi
done <<<"$(xrandr)"

convert "$image" "${hue[@]}" "${effect[@]}" "${lock[@]}" "$image"

# Add modified screenshot to i3lock command
i3lock_cmd=(i3lock -i "$image" -e --debug)

# try to use i3lock with prepared parameters
if ! "${i3lock_cmd[@]}" "${param[@]}" >/dev/null 2>&1; then
    # We have failed, lets get back to stock one
    "${i3lock_cmd[@]}"
fi

# As above, if we were passed -d/--desktop, we'll attempt to restore all windows after unlocking.
if "$desktop"; then
    # Restore all windows
    for id in $window_ids; do
        wmctrl -ia $id
    done
fi
